<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xss</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-01-02T08:28:19.026Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Xss1999</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PAT(乙)  1005 继续(3n+1)猜想 (25分)</title>
    <link href="http://yoursite.com/2020/01/02/PAT-%E4%B9%99-1005-%E7%BB%A7%E7%BB%AD-3n-1-%E7%8C%9C%E6%83%B3-25%E5%88%86/"/>
    <id>http://yoursite.com/2020/01/02/PAT-%E4%B9%99-1005-%E7%BB%A7%E7%BB%AD-3n-1-%E7%8C%9C%E6%83%B3-25%E5%88%86/</id>
    <published>2020-01-02T08:27:47.000Z</published>
    <updated>2020-01-02T08:28:19.026Z</updated>
    
    <content type="html"><![CDATA[<p>卡拉兹(Callatz)猜想已经在1001中给出了描述。在这个题目里，情况稍微有些复杂。</p><p>当我们验证卡拉兹猜想的时候，为了避免重复计算，可以记录下递推过程中遇到的每一个数。例如对 n=3 进行验证的时候，我们需要计算 3、5、8、4、2、1，则当我们对 n=5、8、4、2 进行验证的时候，就可以直接判定卡拉兹猜想的真伪，而不需要重复计算，因为这 4 个数已经在验证3的时候遇到过了，我们称 5、8、4、2 是被 3“覆盖”的数。我们称一个数列中的某个数 n 为“关键数”，如果 n 不能被数列中的其他数字所覆盖。</p><p>现在给定一系列待验证的数字，我们只需要验证其中的几个关键数，就可以不必再重复验证余下的数字。你的任务就是找出这些关键数字，并按从大到小的顺序输出它们。</p><p>输入格式：<br>每个测试输入包含 1 个测试用例，第 1 行给出一个正整数 K (&lt;100)，第 2 行给出 K 个互不相同的待验证的正整数 n (1&lt;n≤100)的值，数字间用空格隔开。</p><p>输出格式：<br>每个测试用例的输出占一行，按从大到小的顺序输出关键数字。数字间用 1 个空格隔开，但一行中最后一个数字后没有空格。</p><p>输入样例：<br>6<br>3 5 6 7 8 11</p><p>输出样例：<br>7 6</p><pre><code class="c++">#include&lt;bits/stdc++.h&gt;using namespace std;bool compare(int a,int b){    return a&gt;b; } int main(){    int a[100000] = {0};    int c[10001] = {0};    int n;    cin &gt;&gt;n;    for(int i=0;i&lt;n;i++)    {        cin &gt;&gt;a[i];    }    for(int i=0;i&lt;n;i++)    {        int x = a[i];        while(x!=1)        {            if(x%2!=0)            {                x = 3*x+1;            }            x = x/2;            c[x] = 1;        }    }    int b[10001] = {0};    int j=0;    for(int i=0;i&lt;n;i++)    {        if(c[a[i]]==0)        {            b[j] = a[i];            j++;        }    }    sort(b,b+j,compare);    for(int i=0;i&lt;j;i++)    {        cout &lt;&lt;b[i];        if(i!=j-1)        {            cout &lt;&lt;&quot; &quot;;         }     }    return 0;}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;卡拉兹(Callatz)猜想已经在1001中给出了描述。在这个题目里，情况稍微有些复杂。&lt;/p&gt;
&lt;p&gt;当我们验证卡拉兹猜想的时候，为了避免重复计算，可以记录下递推过程中遇到的每一个数。例如对 n=3 进行验证的时候，我们需要计算 3、5、8、4、2、1，则当我们对 n=5
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>PAT(乙)  1004 成绩排名 (20分)</title>
    <link href="http://yoursite.com/2020/01/02/PAT-%E4%B9%99-1004-%E6%88%90%E7%BB%A9%E6%8E%92%E5%90%8D-20%E5%88%86/"/>
    <id>http://yoursite.com/2020/01/02/PAT-%E4%B9%99-1004-%E6%88%90%E7%BB%A9%E6%8E%92%E5%90%8D-20%E5%88%86/</id>
    <published>2020-01-02T08:25:05.000Z</published>
    <updated>2020-01-02T08:26:52.718Z</updated>
    
    <content type="html"><![CDATA[<p>读入 n（&gt;0）名学生的姓名、学号、成绩，分别输出成绩最高和成绩最低学生的姓名和学号。</p><p>输入格式：<br>每个测试输入包含 1 个测试用例，格式为</p><p>第 1 行：正整数 n<br>第 2 行：第 1 个学生的姓名 学号 成绩<br>第 3 行：第 2 个学生的姓名 学号 成绩<br>  … … …<br>第 n+1 行：第 n 个学生的姓名 学号 成绩</p><p>其中姓名和学号均为不超过 10 个字符的字符串，成绩为 0 到 100 之间的一个整数，这里保证在一组测试用例中没有两个学生的成绩是相同的。</p><p>输出格式：<br>对每个测试用例输出 2 行，第 1 行是成绩最高学生的姓名和学号，第 2 行是成绩最低学生的姓名和学号，字符串间有 1 空格。</p><p>输入样例：<br>3<br>Joe Math990112 89<br>Mike CS991301 100<br>Mary EE990830 95</p><p>输出样例：<br>Mike CS991301<br>Joe Math990112</p><pre><code class="c++">#include&lt;bits/stdc++.h&gt;using namespace std;struct Student{    string name;    string num;    int score;};int main(){    Student S[1000];    int n;    cin &gt;&gt;n;    for(int i=0;i&lt;n;i++)    {                cin &gt;&gt;S[i].name&gt;&gt;S[i].num&gt;&gt;S[i].score;    }    int max=0,min=0;    for(int i=1;i&lt;n;i++)    {        if(S[i].score&gt;S[max].score)        {            max = i;        }        if(S[i].score&lt;S[min].score)        {            min = i;        }    }    cout &lt;&lt;S[max].name&lt;&lt;&quot; &quot;&lt;&lt;S[max].num&lt;&lt;endl;    cout &lt;&lt;S[min].name&lt;&lt;&quot; &quot;&lt;&lt;S[min].num&lt;&lt;endl;    return 0; } </code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;读入 n（&amp;gt;0）名学生的姓名、学号、成绩，分别输出成绩最高和成绩最低学生的姓名和学号。&lt;/p&gt;
&lt;p&gt;输入格式：&lt;br&gt;每个测试输入包含 1 个测试用例，格式为&lt;/p&gt;
&lt;p&gt;第 1 行：正整数 n&lt;br&gt;第 2 行：第 1 个学生的姓名 学号 成绩&lt;br&gt;第 3 行
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>PAT(乙)  1003 我要通过！ (20分)</title>
    <link href="http://yoursite.com/2019/12/31/PAT-%E4%B9%99-1003-%E6%88%91%E8%A6%81%E9%80%9A%E8%BF%87%EF%BC%81-20%E5%88%86/"/>
    <id>http://yoursite.com/2019/12/31/PAT-%E4%B9%99-1003-%E6%88%91%E8%A6%81%E9%80%9A%E8%BF%87%EF%BC%81-20%E5%88%86/</id>
    <published>2019-12-31T06:27:27.000Z</published>
    <updated>2019-12-31T07:09:31.719Z</updated>
    
    <content type="html"><![CDATA[<p>“答案正确”是自动判题系统给出的最令人欢喜的回复。本题属于 PAT 的“答案正确”大派送 —— 只要读入的字符串满足下列条件，系统就输出“答案正确”，否则输出“答案错误”。</p><p>得到“答案正确”的条件是：</p><p>字符串中必须仅有 P、 A、 T这三种字符，不可以包含其它字符；<br>任意形如 xPATx 的字符串都可以获得“答案正确”，其中 x 或者是空字符串，或者是仅由字母 A 组成的字符串；<br>如果 aPbTc 是正确的，那么 aPbATca 也是正确的，其中 a、 b、 c 均或者是空字符串，或者是仅由字母 A 组成的字符串。<br>现在就请你为 PAT 写一个自动裁判程序，判定哪些字符串是可以获得“答案正确”的。</p><p>输入格式：<br>每个测试输入包含 1 个测试用例。第 1 行给出一个正整数 n (&lt;10)，是需要检测的字符串个数。接下来每个字符串占一行，字符串长度不超过 100，且不包含空格。</p><p>输出格式：<br>每个字符串的检测结果占一行，如果该字符串可以获得“答案正确”，则输出 YES，否则输出 NO。</p><p>输入样例：<br>8<br>PAT<br>PAAT<br>AAPATAA<br>AAPAATAAAA<br>xPATx<br>PT<br>Whatever<br>APAAATAA</p><p>输出样例：<br>YES<br>YES<br>YES<br>YES<br>NO<br>NO<br>NO<br>NO</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt;str;</span><br><span class="line"><span class="keyword">int</span> count1 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> count2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> count3 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;str.length();j++)</span><br><span class="line">&#123;    </span><br><span class="line"><span class="keyword">if</span>((str[j]==<span class="string">'P'</span>)||(str[j]==<span class="string">'A'</span>)||(str[j]==<span class="string">'T'</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span>(str[j] == <span class="string">'A'</span>)</span><br><span class="line">&#123;</span><br><span class="line">j++;</span><br><span class="line">count1++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(str[j] == <span class="string">'P'</span>)</span><br><span class="line">&#123;</span><br><span class="line">j++;</span><br><span class="line"><span class="keyword">while</span>(str[j] == <span class="string">'A'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    j++;</span><br><span class="line">    count2++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(str[j] ==<span class="string">'T'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    j++;</span><br><span class="line">    <span class="keyword">while</span>(str[j] == <span class="string">'A'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">        j++;</span><br><span class="line">        count3++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(count2==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">"NO"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span>(count1*count2==count3)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt;<span class="string">"YES"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">"NO"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">"NO"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">"NO"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt;<span class="string">"NO"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;“答案正确”是自动判题系统给出的最令人欢喜的回复。本题属于 PAT 的“答案正确”大派送 —— 只要读入的字符串满足下列条件，系统就输出“答案正确”，否则输出“答案错误”。&lt;/p&gt;
&lt;p&gt;得到“答案正确”的条件是：&lt;/p&gt;
&lt;p&gt;字符串中必须仅有 P、 A、 T这三种字符，
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>PAT(乙)  1002 写出这个数 (20分)</title>
    <link href="http://yoursite.com/2019/12/30/PAT-%E4%B9%99-1002-%E5%86%99%E5%87%BA%E8%BF%99%E4%B8%AA%E6%95%B0-20%E5%88%86/"/>
    <id>http://yoursite.com/2019/12/30/PAT-%E4%B9%99-1002-%E5%86%99%E5%87%BA%E8%BF%99%E4%B8%AA%E6%95%B0-20%E5%88%86/</id>
    <published>2019-12-30T08:34:39.000Z</published>
    <updated>2019-12-31T07:10:44.064Z</updated>
    
    <content type="html"><![CDATA[<p>读入一个正整数 n，计算其各位数字之和，用汉语拼音写出和的每一位数字。</p><p>输入格式：<br>每个测试输入包含 1 个测试用例，即给出自然数 n 的值。这里保证 n 小于 10<br>​100<br>​​ 。</p><p>输出格式：<br>在一行内输出 n 的各位数字之和的每一位，拼音数字间有 1 空格，但一行中最后一个拼音数字后没有空格。</p><p>输入样例：<br>1234567890987654321123456789</p><p>输出样例：<br>yi san wu</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,i;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt;a;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(a);i++)</span><br><span class="line">&#123;</span><br><span class="line">sum = sum +a[i]-<span class="string">'0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">stringstream</span> ss;</span><br><span class="line">ss &lt;&lt;sum;</span><br><span class="line"><span class="built_in">string</span> str = ss.str();</span><br><span class="line"><span class="built_in">string</span> s[<span class="number">10</span>] = &#123;<span class="string">"ling"</span>,<span class="string">"yi"</span>,<span class="string">"er"</span>,<span class="string">"san"</span>,<span class="string">"si"</span>,<span class="string">"wu"</span>,<span class="string">"liu"</span>,<span class="string">"qi"</span>,<span class="string">"ba"</span>,<span class="string">"jiu"</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;str.<span class="built_in">size</span>();i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;s[str[i]-<span class="string">'0'</span>];</span><br><span class="line"><span class="keyword">if</span>(i+<span class="number">1</span> !=str.<span class="built_in">size</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;读入一个正整数 n，计算其各位数字之和，用汉语拼音写出和的每一位数字。&lt;/p&gt;
&lt;p&gt;输入格式：&lt;br&gt;每个测试输入包含 1 个测试用例，即给出自然数 n 的值。这里保证 n 小于 10&lt;br&gt;​100&lt;br&gt;​​ 。&lt;/p&gt;
&lt;p&gt;输出格式：&lt;br&gt;在一行内输出 n 的各
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>PAT(乙) 1001 害死人不偿命的(3n+1)猜想 (15分)</title>
    <link href="http://yoursite.com/2019/12/30/PAT-%E4%B9%99-1001-%E5%AE%B3%E6%AD%BB%E4%BA%BA%E4%B8%8D%E5%81%BF%E5%91%BD%E7%9A%84-3n-1-%E7%8C%9C%E6%83%B3-15%E5%88%86/"/>
    <id>http://yoursite.com/2019/12/30/PAT-%E4%B9%99-1001-%E5%AE%B3%E6%AD%BB%E4%BA%BA%E4%B8%8D%E5%81%BF%E5%91%BD%E7%9A%84-3n-1-%E7%8C%9C%E6%83%B3-15%E5%88%86/</id>
    <published>2019-12-30T07:34:00.000Z</published>
    <updated>2019-12-31T07:11:02.862Z</updated>
    
    <content type="html"><![CDATA[<p>卡拉兹(Callatz)猜想：</p><p>对任何一个正整数 n，如果它是偶数，那么把它砍掉一半；如果它是奇数，那么把 (3n+1) 砍掉一半。这样一直反复砍下去，最后一定在某一步得到 n=1。卡拉兹在 1950 年的世界数学家大会上公布了这个猜想，传说当时耶鲁大学师生齐动员，拼命想证明这个貌似很傻很天真的命题，结果闹得学生们无心学业，一心只证 (3n+1)，以至于有人说这是一个阴谋，卡拉兹是在蓄意延缓美国数学界教学与科研的进展……</p><p>我们今天的题目不是证明卡拉兹猜想，而是对给定的任一不超过 1000 的正整数 n，简单地数一下，需要多少步（砍几下）才能得到 n=1？</p><p>输入格式：<br>每个测试输入包含 1 个测试用例，即给出正整数 n 的值。</p><p>输出格式：<br>输出从 n 计算到 1 需要的步数。</p><p>输入样例：<br>3</p><p>输出样例：<br>5</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>,n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt;n;</span><br><span class="line"><span class="keyword">while</span>(n!=<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">n = n/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">n = (<span class="number">3</span>*n+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;i;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;卡拉兹(Callatz)猜想：&lt;/p&gt;
&lt;p&gt;对任何一个正整数 n，如果它是偶数，那么把它砍掉一半；如果它是奇数，那么把 (3n+1) 砍掉一半。这样一直反复砍下去，最后一定在某一步得到 n=1。卡拉兹在 1950 年的世界数学家大会上公布了这个猜想，传说当时耶鲁大学师生齐
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>我的第一篇博客文章</title>
    <link href="http://yoursite.com/2019/12/23/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/"/>
    <id>http://yoursite.com/2019/12/23/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</id>
    <published>2019-12-23T10:09:13.000Z</published>
    <updated>2019-12-27T01:32:47.238Z</updated>
    
    <content type="html"><![CDATA[<p>##第一章</p><p>内容</p><hr><a id="more"></a><p>##第二章</p><p>内容</p><hr><p>##参考文献</p><p><a href="http://www.codesheep.cn" target="_blank" rel="noopener">www.codesheep.cn</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##第一章&lt;/p&gt;
&lt;p&gt;内容&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/12/23/hello-world/"/>
    <id>http://yoursite.com/2019/12/23/hello-world/</id>
    <published>2019-12-23T10:02:26.342Z</published>
    <updated>2019-12-26T15:24:52.343Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
